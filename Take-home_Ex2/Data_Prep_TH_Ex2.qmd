---
title: "Data Preparation Process for Take-home Exercise 2"
subtitle: "Data_Prep_TH_Ex2"
editor: visual
author: Yang Tianyi
execute: 
  warning: false
  message: false
format: html
---

# Data Preparation

## Package Installation

In the code chunk below, `p_load()` of *pacman* package is used to install and load the following R packages into R environment:

-   sf,

-   tidyverse,

-   tmap,

-   spdep, and

-   funModeling will be used for rapid Exploratory Data Analysis

```{r}
pacman::p_load(sf, tidyverse, tmap, spdep, funModeling)
```

## Importing water point data

Aspatial data is first imported using the code chunks below:

```{r}
#| eval: false
wp_nga <- read_csv("rawdata/WPdx.csv") %>%
  filter(`#clean_country_name` == "Nigeria")
```

```{r}
#| eval: false
wp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)
```

```{r}
#| eval: false
wp_sf <- st_sf(wp_nga, crs=4326) 
```

```{r}
#| eval: false
head(wp_sf)
```

## Importing Nigeria LGA level boundary data

```{r}
#| eval: false
nga <- st_read(dsn="rawdata",
                   layer="nga_admbnda_adm2_osgof_20190417",
               crs=4326)
```

### Checking duplicate area name

The code chunk below can be used to determine the duplicate elements.

```{r}
#| eval: false
duplicate_area <- nga$`ADM2_EN`[nga$`ADM2_EN` %in% nga$`ADM2_EN`[duplicated(nga$`ADM2_EN`)]]

index <- which(nga$`ADM2_EN` %in% nga$`ADM2_EN`[duplicated(nga$`ADM2_EN`)])

duplicate_area
index
```

There are 12 duplicate elements. Then we can check the location of each element by using tmap.

```{r}
#| eval: false
tmap_mode("view")
tm_shape(nga[nga$`ADM2_EN`  %in% duplicate_area,]) +
  tm_polygons()
```

Then we can compare the map with the google map, and we can find the correct ADM2_EN.

| Index | Original ADM2_EN | Correct ADM2_EN |
|-------|------------------|-----------------|
| 94    | Bassa            | Bassa(Kogi)     |
| 95    | Bassa            | Bassa(Plateau)  |
| 304   | Ifelodun         | Ifelodun(Kwara) |
| 305   | Ifelodun         | Ifelodun(Osun)  |
| 355   | Irepodun         | Irepodun(Kwara) |
| 356   | Irepodun         | Irepodun(Osun)  |
| 519   | Nasarawa         | Nassarawa       |
| 520   | Nasarawa         | Nasarawa        |
| 546   | Obi              | Obi(Benue)      |
| 547   | Obi              | Obi(Nasarawa)   |
| 693   | Surulere         | Surulere(Lagos) |
| 694   | Surulere         | Surulere(Oyo)   |

The code chunk below is used to update the correct ADM2_EN.

```{r}
#| eval: false
nga$`ADM2_EN` [c(94,95,304,305,355,356,519,546,547,693,694)] <- c("Bassa(Kogi)","Bassa(Plateau)",
                                                                               "Ifelodun(Kwara)","Ifelodun(Osun)",
                                                                               "Irepodun (Kwara)","Irepodun(Osun)",
                                                                               "Nassarawa","Obi(Benue)","Obi(Nasarawa)",
                                                                               "Surulere(Lagos)","Surulere(Oyo)")
```

And we check again after the update.

```{r}
#| eval: false
length(nga$`ADM2_EN`[ nga$`ADM2_EN` %in% nga$`ADM2_EN`[duplicated(nga$`ADM2_EN`)] ])
```

## Point in Polygon Overlay

Although *wp_sf* sf data frame consists of a field called *#clean_adm2* which by right should provides the LGA name of the water point located. However, it is always a good practice to be more caution when dealing with data accuracy.

We are going to use a geoprocessing function (or commonly know as GIS analysis) called **point-in-polygon overlay** to transfer the attribute information in *nga* sf data frame into *wp_sf* data frame.

```{r}
#| eval: false
wp_sf <- st_join(wp_sf, nga)
```

`write_rds`of readr package is used to save the *wp_sf* data frame into an output file in *rds* data format. The output file is called wp_nga and saved in data sub-folder.

```{r}
#| eval: false
wp_nigeria <- write_rds(wp_sf,
                    "rawdata/wp_nigeria.rds")
```

## Data Wrangling

### Recode NA values into string

The code chunk below is used to recode all the NA values in \#*status_clean* field into Unknown.

```{r}
#| eval: false
wp_nigeria <- read_rds("rawdata/wp_nigeria.rds")
```

```{r}
#| eval: false
freq(data=wp_nigeria, 
     input = '#status_clean')
```

### Extracting Water Point Data

We are going to extract water point records by using *#status_clean* column.

The code chunk below is used to extract functional water points.

```{r}
#| eval: false
wpt_functional <- wp_nigeria %>%
  filter(`#status_clean` %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))
```

The code chunk below is used to extract non-functional water points.

```{r}
#| eval: false
wpt_nonfunctional <- wp_nigeria %>%
  filter(`#status_clean` %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

The code chunk below is used to extract unknown water points.

```{r}
#| eval: false
wpt_unknown <- wp_nigeria %>%
  filter(`#status_clean`  == "Unknown")
```

### Extracting Water Point Data by main technology

The code chunk below is used to display the distribution of technology adopted by water points.

```{r}
#| eval: false
freq(data=wp_nigeria, 
     input = '#water_tech_category')
```

We are going to categorize the technology into three types: Hand Pump, Mechanized Pump and Unknown(includes NA values, Tapstand, Rope and Bucket).

The code chunk below is used to extract water points by category.

```{r}
#| eval: false
wpt_handpp <- wp_nigeria %>%
  filter(`#water_tech_category` %in%
           c("Hand Pump"))

wpt_mechanizedpp <- wp_nigeria %>%
  filter(`#water_tech_category` %in%
           c("Mechanized Pump"))
```

### Extracting Water Point Data by usage capacity

```{r}
#| eval: false
freq(data=wp_nigeria, 
     input = 'usage_capacity')
```

The code chunk below is used to split *usage\_*capacity into two categories (\<1000 and \>=1000).

```{r}
#| eval: false
wpt_usage_cap_below_1k <- wp_nigeria %>%
  filter(`usage_capacity` %in%
           c("50","250","300"))

wpt_usage_cap_above_1k <- wp_nigeria %>%
  filter(`usage_capacity` %in%
           c("1000"))
```

### Extracting Rural Water Point Data

```{r}
#| eval: false
freq(data=wp_nigeria, 
     input = 'is_urban')
```

```{r}
#| eval: false
wpt_rural <- wp_nigeria %>%
  filter(`is_urban` %in%
           c("FALSE"))
```

#### **Projection of sf dataframe**

The code chunk below is going to create a new data frame *nigeria_wp* to store the newly-derived variables.

```{r}
#| eval: false
nga_select <- wp_nigeria  %>%
  rename ("status" = "#status_clean",
          "lat" = "#lat_deg",
          "long" = "#lon_deg",
          "water_tech" = "#water_tech_category") %>%
  select (status,lat,long,water_tech,usage_capacity,is_urban,water_point_population) %>%
  mutate(status = replace_na(status, "Unknown")) %>%
  mutate (water_tech = replace_na(water_tech, "Unknown")) %>%
  mutate(water_point_population = replace_na(water_point_population,0))

nga_select_sf <- st_as_sf(nga_select, coords = c("long", "lat"),  crs = 4326)
```

```{r}
#| eval: false
nigeria_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nigeria))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown))) %>%
  mutate(`wpt handpump`=lengths(
    st_intersects(nga, wpt_handpp))) %>%
  mutate(`wpt mechpump`=lengths(
    st_intersects(nga, wpt_mechanizedpp))) %>%
  mutate(`wpt usage_below_1k`=lengths(
    st_intersects(nga, wpt_usage_cap_below_1k))) %>%
  mutate(`wpt usage_above_1k`=lengths(
    st_intersects(nga, wpt_usage_cap_above_1k))) %>%
  mutate(`wpt rural`=lengths(
    st_intersects(nga, wpt_rural)))
```

The code chunk below is used to generate related percentage.

```{r}
#| eval: false
nigeria_wp <- nigeria_wp %>%
  mutate(`pct_functional` = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%
  mutate(`pct_handpump` = `wpt handpump`/`total wpt`) %>%
  mutate(`pct_mechpump` = `wpt mechpump`/`total wpt`) %>%
  mutate(`pct_usage_below_1k` = `wpt usage_below_1k`/`total wpt`) %>%
  mutate(`pct_usage_above_1k` = `wpt usage_above_1k`/`total wpt`) %>%
  mutate(`pct_rural` = `wpt rural`/`total wpt`) %>%
  select(3:4, 9:10, 18:33)
```

```{r}
#| eval: false
nigeria_final <- st_join(nga_select_sf,nigeria_wp)
```

Finalized *.rds* format written with selected variables

```{r}
#| eval: false
write_rds(nigeria_final, "rawdata/nigeria_final.rds")
```
