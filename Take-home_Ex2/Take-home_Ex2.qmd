---
title: "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods"
subtitle: "Take-home Ex2"
editor: visual
author: Yang Tianyi
execute: 
  warning: false
  message: false
format: html
---

# Overview

## Introduction

The process of creating regions is called [regionalisation](https://www.researchgate.net/publication/28153673_Supervised_Regionalization_Methods_A_Survey/link/0fcfd5094046b13d35000000/download). A regionalisation is a special kind of clustering where the objective is to group observations which are similar in their statistical attributes, but also in their spatial location. In this sense, regionalization embeds the same logic as standard clustering techniques, but also applies a series of geographical constraints. Often, these constraints relate to connectivity: two candidates can only be grouped together in the same region if there exists a path from one member to another member that never leaves the region. These paths often model the spatial relationships in the data, such as contiguity or proximity. However, connectivity does not always need to hold for all regions, and in certain contexts it makes sense to relax connectivity or to impose different types of geographic constraints.

## Objectives

In this take-home exercise you are required to regionalise Nigeria by using, but not limited to the following measures:

-   Total number of functional water points

-   Total number of nonfunctional water points

-   Percentage of functional water points

-   Percentage of non-functional water points

-   Percentage of main water point technology (i.e. Hand Pump)

-   Percentage of usage capacity (i.e. \< 1000, \>=1000)

-   Percentage of rural water points

# The Data

### Apstial data

For the purpose of this assignment, data from [WPdx Global Data Repositories](https://www.waterpointdata.org/access-data/) will be used. There are two versions of the data. They are: WPdx-Basic and WPdx+. You are required to use WPdx+ data set.

### Geospatial data

Nigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be used in this take-home exercise. The data can be downloaded either from The [Humanitarian Data Exchange](https://data.humdata.org/) portal or [geoBoundaries](https://www.geoboundaries.org/).

### R Package Installation

Before we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.

The R packages needed for this exercise are as follows:

-   Spatial data handling

    -   **sf**, **rgdal** and **spdep**

-   Attribute data handling

    -   **tidyverse**, especially **readr**, **ggplot2** and **dplyr**

-   Choropleth mapping

    -   **tmap**

-   Multivariate data visualisation and analysis

    -   **coorplot**, **ggpubr**, and **heatmaply**

-   Cluster analysis

    -   **cluster**

    -   **ClustGeo**

The code chunks below installs and launches these R packages into R environment.

```{r}
pacman::p_load(tmap, spdep, funModeling, rgdal, spdep, tmap, 
               sf, ClustGeo, ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, tidyverse, GGally)
```

## Importing Geospatial Data from Filtered *.rds* Data

In the previous Data Preparation file, we have prepared and filtered data into *.rds* format, the following exercise will be based on the filtered data.

## Reading the Spatial Distribution of Water Points

First, we are going to import the two water point geospatial data (i.e. nga_wp and nga_final) with one contains more informational and other more simplified data by using the code chunk below.

```{r}
nga_wp <- read_rds("data/nigeria_final.rds")
nga <- read_rds("data/nigeria_wp.rds")
```

# Data Wrangling

## Working with Projection

Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system. The technical term of this process is called **projection transformation**.

### Extracting Water Point Data

The code chunk below is used to display the status column of the data

```{r}
freq(data=nga_wp, 
     input = 'status')
```

We are going to extract water point records by using *status* column.

The code chunk below is used to extract functional water points.

```{r}
wpt_functional <- nga_wp %>%
  filter(`status` %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))
```

The code chunk below is used to extract non-functional water points.

```{r}
wpt_nonfunctional <- nga_wp %>%
  filter(`status` %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

The code chunk below is used to extract unknown water points.

```{r}
wpt_unknown <- nga_wp %>%
  filter(`status`  == "Unknown")
```

### Extracting Water Point Data by main technology

The code chunk below is used to display the distribution of technology adopted by water points.

```{r}
freq(data=nga_wp, 
     input = 'water_tech')
```

We are going to categorize the technology into three types: Hand Pump, Mechanized Pump and Unknown(includes NA values, Tapstand, Rope and Bucket).

The code chunk below is used to extract water points by category.

```{r}
wpt_handpp <- nga_wp %>%
  filter(`water_tech` %in%
           c("Hand Pump"))

wpt_mechanizedpp <- nga_wp %>%
  filter(`water_tech` %in%
           c("Mechanized Pump"))
```

### Extracting Water Point Data by usage capacity

```{r}
freq(data=nga_wp, 
     input = 'usage_capacity')
```

The code chunk below is used to split *usage\_*capacity into two categories (\<1000 and \>=1000).

```{r}
wpt_usage_cap_below_1k <- nga_wp %>%
  filter(`usage_capacity` %in%
           c("50","250","300"))

wpt_usage_cap_above_1k <- nga_wp %>%
  filter(`usage_capacity` %in%
           c("1000"))
```

### Extracting Rural Water Point Data

```{r}
freq(data=nga_wp, 
     input = 'is_urban')
```

```{r}
#| eval: false
wpt_rural <- nga_wp %>%
  filter(`is_urban` %in%
           c("FALSE"))
```

### Assigning EPSG code to a simple feature data frame

One of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.

The simplified water point data of `nga` will be run through *st_crs()* of *sf* package as shown in the code chunk below.

```{r}
st_crs(nga)
```

This code indicates that the EPSG is 4326. This is a wrong EPSG code because the correct EPSG code for the task should be a choice between 26391, 26392, and 26303. Therefore, transformation of EPSG is needed, *st_set_crs()* of **sf** package is used as shown in the code chunk below.

```{r}
NIGERIA <- st_transform(nga, 26391)
NIGERIA <- na.omit(NIGERIA)
```

Now, let us check the CSR again by using the code chunk below.

```{r}
st_crs(NIGERIA)
```

Notice that the EPSG code is 26391 now.

The summary of the filtered data is shown below:

```{r}
summary(NIGERIA)
```

Using the [`unique()`](https://rdrr.io/r/base/unique.html) function, we can identify how many variables are stored within the columns.

```{r}
unique(NIGERIA)
```

### Data Wrangling

#### **Variables Collinearity**

When clustering variables are collinear, certain variables are given more weight than others. Two variables that are highly correlated indicate the same notion. However, because that notion is now represented twice in the data, it receives double the weight of all other variables. The ultimate solution is likely to be tilted toward that notion, which might be a problem if not foreseen. Therefore there is a need to check for **Collinearity** before conducting cluster analysis. We will use the [`cor()`](https://rdrr.io/r/stats/cor.html) and `corrplot.mixed` function from the **corrplot** package to visualize and identify highly correlated variables.

```{r}
nigeria_var <- NIGERIA %>%
  st_drop_geometry()

cluster_vars.cor = cor(nigeria_var[,14:20], use = "complete.obs")

corrplot.mixed(cluster_vars.cor,
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               tl.cex = 0.6,
               number.cex = 0.5,
               diag = "l",
               tl.col = "black")
```

From the result above, we can identify 3 variables that are highly correlated. We will now choose to only retain **1** (pct_mechpump) for the analysis. We will create another dataframe to store all the variables required for the subsequent cluster analysis.

```{r}
NIGERIA <- NIGERIA %>%
  select(-`pct_usage_below_1k`, -`pct_usage_above_1k`)

nigeria_cluster_var <- NIGERIA %>%
  st_drop_geometry()
```

## Hierarchy Cluster Analysis

In this section, you will learn how to perform hierarchical cluster analysis. The analysis consists of four major steps:

### Extracting clustering variables

The code chunk below will be used to extract the clustering variables from the *shan_sf* simple feature object into data.frame.

```{r}
cluster_vars <- nigeria_cluster_var %>%
  select("ADM2_EN", 
         "pct_functional", 
         "pct_non-functional", 
         "pct_mechpump", 
         "pct_rural")
head(cluster_vars,10)
```

Notice that the final clustering variables list does not include variable INTERNET_PR because it is highly correlated with variable COMPUTER_PR.

Next, we need to change the rows by township name instead of row number by using the code chunk below

```{r}
row.names(cluster_vars) <- cluster_vars$ADM2_EN

head(cluster_vars,10)
```

Notice that the row number has been replaced into the area name.

Now, we will delete the *ADM2_EN* field by using the code chunk below.

```{r}
cluster_vars <- select(cluster_vars, c(2:5))
head(cluster_vars, 10)
```

### Data Standardisation

In general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result is baised to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.

### Min-Max standardisation

In the code chunk below, *normalize()* of [*heatmaply*](https://cran.r-project.org/web/packages/heatmaply/) package is used to stadardisation the clustering variables by using Min-Max method. The *summary()* is then used to display the summary statistics of the standardised clustering variables.

```{r}
cluster_vars.std <- normalize(cluster_vars)
summary(cluster_vars.std)
```

Notice that the values range of the Min-max standardised clustering variables are 0-1 now.

### Computing proximity matrix

In R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using [*dist()*](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/dist.html) of R.

*dist()* supports six distance proximity calculations, they are: **euclidean, maximum, manhattan, canberra, binary and minkowski**. The default is *euclidean* proximity matrix.

The code chunk below is used to compute the proximity matrix using *euclidean* method.

```{r}
proxmat <- dist(cluster_vars, method = 'euclidean')
```

### Computing hierarchical clustering

In R, there are several packages provide hierarchical clustering function. In this hands-on exercise, [*hclust()*](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/hclust.html) of R stats will be used.

*hclust()* employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).

The code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class **hclust** which describes the tree produced by the clustering process.

```{r}
hclust_ward <- hclust(proxmat, method = 'ward.D')
```

We can then plot the tree by using *plot()* of R Graphics as shown in the code chunk below.

```{r}
plot(hclust_ward, cex = 0.2)
```

### Selecting the optimal clustering algorithm

One of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use [*agnes()*](https://www.rdocumentation.org/packages/cluster/versions/2.1.0/topics/agnes) function of [**cluster**](https://cran.r-project.org/web/packages/cluster/) package. It functions like *hclus()*, however, with the *agnes()* function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).

The code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.

```{r}
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")

ac <- function(x) {
  agnes(cluster_vars, method = x)$ac
}

map_dbl(m, ac)
```

With reference to the output above, we can see that Ward\'s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward\'s method will be used.

### Determining Optimal Clusters

Another technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.

There are [three](https://statweb.stanford.edu/~gwalther/gap) commonly used methods to determine the optimal clusters, they are:

-   [Elbow Method](https://en.wikipedia.org/wiki/Elbow_method_(clustering))

-   [Average Silhouette Method](https://www.sciencedirect.com/science/article/pii/0377042787901257?via%3Dihub)

-   [Gap Statistic Method](http://www.web.stanford.edu/~hastie/Papers/gap.pdf)

#### Gap Statistic Method

The [**gap statistic**](http://www.web.stanford.edu/~hastie/Papers/gap.pdf) compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.

To compute the gap statistic, [*clusGap()*](https://www.rdocumentation.org/packages/cluster/versions/2.1.0/topics/clusGap) of [**cluster**](https://cran.r-project.org/web/packages/cluster/) package will be used.

```{r}
set.seed(1234)
gap_stat <- clusGap(cluster_vars, 
                    FUN = hcut, 
                    nstart = 25, 
                    K.max = 10, 
                    B = 50)
# Print the result
print(gap_stat, method = "firstmax")
```

Also note that the [*hcut*](https://rpkgs.datanovia.com/factoextra/reference/hcut.html) function used is from [**factoextra**](https://rpkgs.datanovia.com/factoextra/) package.

Next, we can visualise the plot by using [*fviz_gap_stat()*](https://rpkgs.datanovia.com/factoextra/reference/fviz_nbclust.html) of [**factoextra**](https://rpkgs.datanovia.com/factoextra/) package.

```{r}
fviz_gap_stat(gap_stat)
```

With reference to the gap statistic graph above, the recommended number of cluster to retain is 4. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 10-cluster gives the largest gap statistic and should be the next best cluster to pick.

### Interpreting the dendrograms

In the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.

The height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.

It\'s also possible to draw the dendrogram with a border around the selected clusters by using [*rect.hclust()*](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/rect.hclust.html) of R stats. The argument *border* is used to specify the border colors for the rectangles.

```{r}
plot(hclust_ward, cex = 0.2)
rect.hclust(hclust_ward, 
            k = 4, 
            border = 2:5)
```

###  Mapping the clusters formed

[*cutree()*](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/cutree.html) of R Base will be used in the code chunk below to derive a 6-cluster model.

```{r}
groups <- as.factor(cutree(hclust_ward, k=4))
```

The output is called *groups*. It is a *list* object.

In order to visualise the clusters, the *groups* object need to be appended onto *shan_sf* simple feature object.

The code chunk below form the join in three steps:

-   the *groups* list object will be converted into a matrix;

-   *cbind()* is used to append *groups* matrix onto shan_sf to produce an output simple feature object called `shan_sf_cluster`; and

-   *rename* of **dplyr** package is used to rename *as.matrix.groups* field as *CLUSTER*.

```{r}
nigeria_cluster <- cbind(NIGERIA, as.matrix(groups)) %>%
  rename(`CLUSTER`=`as.matrix.groups.`)
```

Next, *qtm()* of **tmap** package is used to plot the choropleth map showing the cluster formed.

```{r}
qtm(nigeria_cluster, "CLUSTER")
```

The choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used.

## Spatially Constrained Clustering: SKATER approach

### Converting into SpatialPolygonsDataFrame

First, we need to convert `NIGERIA` into SpatialPolygonsDataFrame. This is because SKATER function only support **sp** objects such as SpatialPolygonDataFrame.

The code chunk below uses [*as_Spatial()*](https://r-spatial.github.io/sf/reference/coerce-methods.html) of **sf** package to convert `NIGERIA` into a SpatialPolygonDataFrame called `nga_sp`.

```{r}
nga_sp <- as_Spatial(NIGERIA)
```

### Computing Neighbour List

Next, [poly2nd()](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package will be used to compute the neighbours list from polygon list.

```{r}
nga.nb <- poly2nb(nga_sp)
summary(nga.nb)
```

We can plot the neighbours list on nga_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.

```{r}
plot(nga_sp, 
     border=grey(.2))
plot(nga.nb, 
     coordinates(nga_sp), 
     col="blue", 
     add=TRUE)
```

### Computing minimum spanning tree

#### Calculating edge costs

Next, [*nbcosts()*](https://r-spatial.github.io/spdep/reference/nbcosts.html) of **spdep** package is used to compute the cost of each edge. It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node.

The code chunk below is used to compute the cost of each edge.

```{r}
lcosts <- nbcosts(nga.nb, cluster_vars)
```

For each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.

Next, We will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed ***lcosts*** as the weights.

In order to achieve this, [*nb2listw()*](https://r-spatial.github.io/spdep/reference/nb2listw.html) of **spdep** package is used as shown in the code chunk below.

Note that we specify the *style* as **B** to make sure the cost values are not row-standardised.

```{r}
nga.w <- nb2listw(nga.nb, 
                   lcosts, 
                   style="B")
summary(nga.w)
```

### Computing minimum spanning tree

The minimum spanning tree is computed by mean of the [*mstree()*](https://r-spatial.github.io/spdep/reference/mstree.html) of **spdep** package as shown in the code chunk below.

```{r}
nga.mst <- mstree(nga.w)
```

After computing the MST, we can check its class and dimension by using the code chunk below.

```{r}
class(nga.mst)
```

```{r}
dim(nga.mst)
```

```{r}
head(nga.mst)
```

The plot method for the MST include a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.

```{r}
plot(nga_sp, border=gray(.5))
plot.mst(nga.mst, 
         coordinates(nga_sp), 
         col="blue", 
         cex.lab=0.2, 
         cex.circles=0.005, 
         add=TRUE)
```

### Computing spatially constrained clusters using SKATER method

The code chunk below compute the spatially constrained cluster using [*skater()*](https://r-spatial.github.io/spdep/reference/skater.html) of **spdep** package.

```{r}
clust6 <- spdep::skater(edges = nga.mst[,1:2], 
                 data = cluster_vars, 
                 method = "euclidean", 
                 ncuts = 5)
```

The *skater()* takes three mandatory arguments: - the first two columns of the MST matrix (i.e. not the cost), - the data matrix (to update the costs as units are being grouped), and - the number of cuts.

The result of the *skater()* is an object of class **skater**. We can examine its contents by using the code chunk below.

```{r}
str(clust6)
```

We can check the cluster assignment by using the conde chunk below.

```{r}
ccs6 <- clust6$groups
table(ccs6)
```

Lastly, we can also plot the pruned tree that shows the five clusters on top of the townshop area.

```{r}
plot(nga_sp, border=gray(.5))
plot(clust6, 
     coordinates(nga_sp), 
     cex.lab=.2,
     groups.colors=c("red","green","blue", "brown", "pink"),
     cex.circles=0.005, 
     add=TRUE)
```

### Visualising the clusters in choropleth map

The code chunk below is used to plot the newly derived clusters by using SKATER method.

```{r}
groups_mat <- as.matrix(clust6$groups)
nigeria_spatialcluster <- cbind(nigeria_cluster, as.factor(groups_mat)) %>%
  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)
qtm(nigeria_spatialcluster, "SP_CLUSTER")
```

For easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.

```{r}
hclust.map <- qtm(nigeria_cluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) 

shclust.map <- qtm(nigeria_spatialcluster,
                   "SP_CLUSTER") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(hclust.map, shclust.map,
             asp=NA, ncol=2)
```

We can see that the SP cluster is much more gathered together, displaying a rather evenly separated situation, while the hierarchy cluster is much more scattered around the map. In conclusion, the characteristics of the two are totally different, but it is hard to determine which is better.

### Spatially Constrained Hierarchical Clustering

Before we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using [`st_distance()`](https://r-spatial.github.io/sf/reference/geos_measures.html) of sf package.

```{r}
dist <- st_distance(NIGERIA, NIGERIA)
distmat <- as.dist(dist)
```

Notice that `as.dist()` is used to convert the data frame into matrix.

Next, `choicealpha()` will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.

```{r}
cr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=4, graph = TRUE)
```

With reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk below.

```{r}
clustG <- hclustgeo(proxmat, distmat, alpha = 0.3)
```

Next, `cutree()` is used to derive the cluster object.

```{r}
groups <- as.factor(cutree(clustG, k=4))
```

We will then join back the group list with *NIGERIA* polygon feature data frame by using the code chunk below.

```{r}
nigeria_Gcluster <- cbind(NIGERIA, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)
```

We can now plot the map of the newly delineated spatially constrained clusters.

```{r}
Gcluster.map <- qtm(nigeria_Gcluster, "CLUSTER")
Gcluster.map
```

## Visualization of Clusters

### Visualizing individual clustering map

```{r}
tmap_arrange(hclust.map, shclust.map, Gcluster.map, ncol = 3, asp = 1)
```

# **Conclusion**

From the analysis conducted above, we can visualize the differences in each clustering methods. The limitation of hierarchy cluster is that the regions are scattered all around the map, making it very difficult to determine the exact areas or regions of a specific type. The SKATER approach, however, shows a much clear division between regions. At the end of the day, the lack of determination of accuracy is causing this issue of choosing the right cluster method, one might say the spatially constrained clustering is better with a more detailed division between regions, others might say the original hierarchy is the best with the concentrated areas displayed. At last, there still needs a more detailed and specific accuracy analysis on the different clustering methods conducted, while the current three has shown different aspect of their own interpretation of the right map.
