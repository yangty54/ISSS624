---
title: "Regionalisation of Multivariate Water Point Attributes with Non-spatially Constrained and Spatially Constrained Clustering Methods"
subtitle: "Take-home Ex2"
editor: visual
author: Yang Tianyi
execute: 
  warning: false
  message: false
format: html
---

# Overview

## Introduction

The process of creating regions is called [regionalisation](https://www.researchgate.net/publication/28153673_Supervised_Regionalization_Methods_A_Survey/link/0fcfd5094046b13d35000000/download). A regionalisation is a special kind of clustering where the objective is to group observations which are similar in their statistical attributes, but also in their spatial location. In this sense, regionalization embeds the same logic as standard clustering techniques, but also applies a series of geographical constraints. Often, these constraints relate to connectivity: two candidates can only be grouped together in the same region if there exists a path from one member to another member that never leaves the region. These paths often model the spatial relationships in the data, such as contiguity or proximity. However, connectivity does not always need to hold for all regions, and in certain contexts it makes sense to relax connectivity or to impose different types of geographic constraints.

## Objectives

In this take-home exercise you are required to regionalise Nigeria by using, but not limited to the following measures:

-   Total number of functional water points

-   Total number of nonfunctional water points

-   Percentage of functional water points

-   Percentage of non-functional water points

-   Percentage of main water point technology (i.e. Hand Pump)

-   Percentage of usage capacity (i.e. \< 1000, \>=1000)

-   Percentage of rural water points

# The Data

### Apstial data

For the purpose of this assignment, data from [WPdx Global Data Repositories](https://www.waterpointdata.org/access-data/) will be used. There are two versions of the data. They are: WPdx-Basic and WPdx+. You are required to use WPdx+ data set.

### Geospatial data

Nigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be used in this take-home exercise. The data can be downloaded either from The [Humanitarian Data Exchange](https://data.humdata.org/) portal or [geoBoundaries](https://www.geoboundaries.org/).

### R Package Installation

Before we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.

The R packages needed for this exercise are as follows:

-   Spatial data handling

    -   **sf**, **rgdal** and **spdep**

-   Attribute data handling

    -   **tidyverse**, especially **readr**, **ggplot2** and **dplyr**

-   Choropleth mapping

    -   **tmap**

-   Multivariate data visualisation and analysis

    -   **coorplot**, **ggpubr**, and **heatmaply**

-   Cluster analysis

    -   **cluster**

    -   **ClustGeo**

The code chunks below installs and launches these R packages into R environment.

```{r}
pacman::p_load(rgdal, spdep, tmap, sf, ClustGeo, 
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, tidyverse, GGally)
```

## Importing Geospatial Data from Filtered *.rds* Data

In the previous Data Preparation file, we have prepared and filtered data into *.rds* format, the following exercise will be based on the filtered data.

## Reading the Spatial Distribution of Water Points

First, we are going to import the water point geospatial data (i.e. nga_wp) by using the code chunk below.

```{r}
nga_wp <- read_rds("data/nigeria_wp.rds")
  mutate(status_cle = replace_na(status_cle, "Unknown"))
```

# Data Wrangling

## Working with Projection

Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system. The technical term of this process is called **projection transformation**.

### Assigning EPSG code to a simple feature data frame

One of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.

The water point data of `nga_wp` will be run through *st_crs()* of *sf* package as shown in the code chunk below.

```{r}
st_crs(nga_wp)
```

This code indicates that the EPSG is 4326. This is a wrong EPSG code because the correct EPSG code for the task should be a choice between 26391, 26392, and 26303. Therefore, transformation of EPSG is needed, *st_set_crs()* of **sf** package is used as shown in the code chunk below.

```{r}
NIGERIA <- st_transform(nga_wp, 26391)
```

Now, let us check the CSR again by using the code chunk below.

```{r}
st_crs(NIGERIA)
```

Notice that the EPSG code is 26391 now.

The summary of the filtered data is shown below:

```{r}
summary(NIGERIA)
```

Using the [`unique()`](https://rdrr.io/r/base/unique.html) function, we can identify how many variables are stored within the columns.

```{r}
unique(NIGERIA)
```

### Recode NA values into string

The code chunk below is used to recode all the NA values in \#*status_clean* field into Unknown.

```{r}
#| eval: false
freq(data=NIGERIA, 
     input = '#status_clean')
```

### Extracting Water Point Data

We are going to extract water point records by using *#status_clean* column.

The code chunk below is used to extract functional water points.

```{r}
#| eval: false
wpt_functional <- wp_nigeria %>%
  filter(`#status_clean` %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))
```

The code chunk below is used to extract non-functional water points.

```{r}
#| eval: false
wpt_nonfunctional <- wp_nigeria %>%
  filter(`#status_clean` %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

The code chunk below is used to extract unknown water points.

```{r}
#| eval: false
wpt_unknown <- wp_nigeria %>%
  filter(`#status_clean`  == "Unknown")
```

### Extracting Water Point Data by main technology

The code chunk below is used to display the distribution of technology adopted by water points.

```{r}
#| eval: false
freq(data=wp_nigeria, 
     input = '#water_tech_category')
```

We are going to categorize the technology into three types: Hand Pump, Mechanized Pump and Unknown(includes NA values, Tapstand, Rope and Bucket).

The code chunk below is used to extract water points by category.

```{r}
#| eval: false
wpt_handpp <- wp_nigeria %>%
  filter(`#water_tech_category` %in%
           c("Hand Pump"))

wpt_mechanizedpp <- wp_nigeria %>%
  filter(`#water_tech_category` %in%
           c("Mechanized Pump"))
```

### Extracting Water Point Data by usage capacity

```{r}
#| eval: false
freq(data=wp_nigeria, 
     input = 'usage_capacity')
```

The code chunk below is used to split *usage\_*capacity into two categories (\<1000 and \>=1000).

```{r}
#| eval: false
wpt_usage_cap_below_1k <- wp_nigeria %>%
  filter(`usage_capacity` %in%
           c("50","250","300"))

wpt_usage_cap_above_1k <- wp_nigeria %>%
  filter(`usage_capacity` %in%
           c("1000"))
```

### Extracting Rural Water Point Data

```{r}
#| eval: false
freq(data=wp_nigeria, 
     input = 'is_urban')
```

```{r}
#| eval: false
wpt_rural <- wp_nigeria %>%
  filter(`is_urban` %in%
           c("FALSE"))
```

### Performing Point-in-Polygon Count

The code chunk below is going to create a new data frame *nigeria_wp* to store the newly-derived variables.

```{r}
#| eval: false
nigeria_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nigeria))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown))) %>%
  mutate(`wpt handpump`=lengths(
    st_intersects(nga, wpt_handpp))) %>%
  mutate(`wpt mechpump`=lengths(
    st_intersects(nga, wpt_mechanizedpp))) %>%
  mutate(`wpt usage_below_1k`=lengths(
    st_intersects(nga, wpt_usage_cap_below_1k))) %>%
  mutate(`wpt usage_above_1k`=lengths(
    st_intersects(nga, wpt_usage_cap_above_1k))) %>%
  mutate(`wpt rural`=lengths(
    st_intersects(nga, wpt_rural)))
```

The code chunk below is used to generate related percentage.

```{r}
#| eval: false
nigeria_wp <- nigeria_wp %>%
  mutate(`pct_functional` = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%
  mutate(`pct_handpump` = `wpt handpump`/`total wpt`) %>%
  mutate(`pct_mechpump` = `wpt mechpump`/`total wpt`) %>%
  mutate(`pct_usage_below_1k` = `wpt usage_below_1k`/`total wpt`) %>%
  mutate(`pct_usage_above_1k` = `wpt usage_above_1k`/`total wpt`) %>%
  mutate(`pct_rural` = `wpt rural`/`total wpt`) %>%
  select(3:4, 9:10, 18:33)
```

```{r}
#| eval: false
write_rds(nigeria_wp, "rawdata/nigeria_wp.rds")
```

```{r}
nigeria_wp <- read_rds("rawdata/nigeria_wp.rds")
```
